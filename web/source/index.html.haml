---
title: Getting Started
---

.container_2
  .grid_1
    %p
      = succeed(':') do
        %strong Getting started
      Need a search engine in a Ruby script and got 3 minutes?
      %pre
        %code
          gem install picky
    %p
      and copy paste
      %pre
        %code
          :preserve
            #!/usr/bin/env ruby

            require 'picky'

            # Create an index which is saved into './index' when you
            # run index.dump(). Note that :id is implied - every input
            # object must supply an :id!
            #
            index = Picky::Index.new :people do
              category :age
              category :name
            end

            # Define a data input class. Any object that responds to
            # :id, :age, :name can be added to the index.
            #
            Person = Struct.new :id, :age, :name

            # Add some data objects to the index.
            # IDs can be any unique string or integer.
            #
            index.add Person.new(1, 34, 'Florian is the author of picky')
            index.add Person.new(2, 77, 'Floris is related to Florian')

            # Create a search interface object.
            #
            people = Picky::Search.new index

            # Do a search and remember the results.
            #
            results = people.search 'floris'

            # Show the results.
            #
            p results.ids # => [2]
    %p
      Have fun changing the code to suit your needs :)
    %p
      Got 5 minutes and want Picky in a web server?
    %p
      %a{ :href => 'getting_started.html' } Install and run Picky with a nice Sinatra interface

    %h3 Help / Feedback
    %p
      We're always glad for help requests, feedback, single-page scripts, project battle stories:
    %p
      %a{ :href => 'http://groups.google.com/forum/#!forum/picky-ruby' } Share it in the mailing list
    %p
      For quick info updates,
      %a{ :href => 'http://twitter.com/picky_rb' } follow Picky
      on twitter.
    %p
      You might also find excellent Pickyists on IRC in
      %a{ :href => 'http://webchat.freenode.net/' } #picky
      that can also help.
    %p
      %img{ :src => 'http://www.gravatar.com/avatar/de2d64478e715fb02266f77a3f5641f6?size=90' }
      %br/
      This webpage & the images on it have been designed by me,
      %a{ :href => 'http://florianhanke.com' } Florian Hanke
      %a{ :href => 'http://twitter.com/hanke' } @hanke
      aka "Flöre", or "Floere" – if you have personal feedback on anything, I'm pleased to hear it.
  .grid_1
    %p
      Need a search engine in a Sinatra server & web frontend and got 10 minutes?
    %code
      %pre
        gem install picky-generators
    %p
      This will also install the needed gems "picky" and "picky-client".
    %p
      Other
      %a{ :href => "#system-requirements-server" } system requirements
      if it doesn't run straightaway.
    %h3 Create a web server
    %p The server generates a library example, which you can run right away.
    %code
      %pre
        :preserve
          # Generates a directory "app_name"
          # with a new Picky default server project.
          # Type "picky generate" to see other options.

          picky generate server app_name
      %pre
        :preserve
          cd app_name
          bundle install
    %h4 1. Index the data
    %code
      %pre
        rake index
    %h4 2. Start the server
    %code
      %pre
        rake start
    %h4 3. Try a query
    %code
      %pre
        curl localhost:8080/books?query=test
    %p
      Don't worry about the strange looking results!
      The next part (client) will take care of them.
    %p
      If you're interested anyway:
      %a{ :href => 'http://github.com/floere/picky/wiki/results-format-and-structure' } Results (Format & Structure)
    %h3 The client
    %p The client generates an example app for the "library" example backend, using Sinatra.
    %code
      %pre
        :preserve
          # Generates a directory "app_name"
          # with a new Picky client Sinatra project.

          picky generate client app_name
    %pre
      :preserve
        cd app_name
        bundle install
    %h4 1. Start the app server
    %code
      %pre
        unicorn -p 3000
    %h4 2. Admire your work
    %p
      Go to
      %a{ :href => 'http://localhost:3000/' } http://localhost:3000/
      and try the examples.
    %h3 Your own search
    %p
      You're probably itching to change the example for
      your own data. How do you do this?
    %h4 The server
    %p In the server directory, just type
    %code
      %pre
        rake todo
    %p and it will tell you where to change the server configuration.
    %h4 The client
    %p
      Go to
      %a{ :href => 'http://localhost:3000/configure' } http://localhost:3000/configure
      and the page will show you how to configure your app server.
    %p
      That's it, congratulations! :)
    %h3#system-requirements-server System Requirements
    %p
      %ul
        %li OSX / Linux
        %li
          %a{ :href => 'http://www.ruby-lang.org/en/downloads/' } Ruby 2
        %li
          %a{ :href => 'http://gembundler.com/' } Bundler Gem
    %p
      I recommend
      %a{ :href => 'https://github.com/postmodern/chruby' } chruby
      for installing and managing Ruby versions.
    %h3 Overview
    %p Before we start, the big picture:
    %img{ :src => 'diagrams/basic-overview.png', :width => '480px' }
    %p
      That's the basic setup. The things to remember are:
      %ol
        %li The Picky server calculates IDs for a query.
        %li Your app server renders results for the resulting IDs.
        %li The Picky JS frontend offers help to the user.
    %p
      Together they are like a small A-Team, something like "Action Search Squad Alpha"! «We've got the results and are heading back to base now, Sir!» Bam!
    %p
      Note that you don't need a Picky client. You could just as well use the results in your Python/Java/PHP app server (If you happen to write a client for one of these, please let me know).
  .grid_1
    %h3 Need assistance?
    %p
      Right here. I'm happy to help!
      If something doesn't work, send/gist me your app/application.rb
      and I'll look into it.
    %p
      = succeed(', ') do
        %a{ :href => 'http://github.com/inbox/new/floere' } github (floere)
      = succeed(', ') do
        %a{ :href => 'http://twitter.com/hanke' } twitter (hanke)
      %a{ :href => 'mailto:florian.hanke@gmail.com' } mail (gmail)
    %p
      There's a Wiki as well:
      %a{ :href => 'http://github.com/floere/picky/wiki' } Picky Wiki
    %h3 Accompanying Video
    %p
      If you don't have the time or leisure to do it yourself, watch this:
    %iframe{ :src => "http://player.vimeo.com/video/17161012", :width => "460", :height => "365", :frameborder => "0" }
    %p
      Note that the video was made with version 1.0.0.
    %p
      In the latest version, instead of
    %code
      %pre
        :preserve
          picky project &lt;server dir&gt;
          picky-client sinatra &lt;client dir&gt;
    %p
      the following commands are now used:
    %code
      %pre
        :preserve
          picky generate unicorn_server &lt;server dir&gt;
          picky generate sinatra_client &lt;client dir&gt;
    %p
      A bit more wordy, but hopefully clearer what it does.